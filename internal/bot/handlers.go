package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/AndrePim/telegram_english_learn_bot/internal/repository"
	"github.com/AndrePim/telegram_english_learn_bot/internal/service"
)

type BotHandlers struct {
	userService *service.UserService
	wordService *service.WordService
}

func NewBotHandlers(userService *service.UserService, wordService *service.WordService) *BotHandlers {
	return &BotHandlers{
		userService: userService,
		wordService: wordService,
	}
}

// DefaultHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *BotHandlers) DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
	})
}

// StartHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *BotHandlers) StartHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	user := update.Message.From

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := h.userService.RegisterUser(user.ID, user.Username, user.FirstName, user.LastName)
	if err != nil {
		log.Printf("Failed to register user: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		})
		return
	}

	welcomeText := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç, %s! üëã

–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üìù /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
üìö /words - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–ª–æ–≤–∞
üß† /quiz - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
üîÑ /review - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /add!`, user.FirstName)

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   welcomeText,
	})
}

// HelpHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *BotHandlers) HelpHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	helpText := `ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ

üìù /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
   –§–æ—Ä–º–∞—Ç: /add —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥
   –ü—Ä–∏–º–µ—Ä: /add apple - —è–±–ª–æ–∫–æ

üìö /words - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–ª–æ–≤–∞

üß† /quiz - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤

üîÑ /review - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å

üóëÔ∏è /delete [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞

üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è

üé® /image [—Å–ª–æ–≤–æ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞

‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –°–æ–≤–µ—Ç: –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–ª–æ–≤–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!
–ü—Ä–∏–º–µ—Ä: /add beautiful - –∫—Ä–∞—Å–∏–≤—ã–π (She is beautiful)`

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   helpText,
	})
}

// AddHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add
func (h *BotHandlers) AddHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID
	text := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/add"))

	if text == "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä: /add apple - —è–±–ª–æ–∫–æ",
		})
		return
	}

	// –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
	parts := strings.Split(text, " - ")
	if len(parts) < 2 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä: /add apple - —è–±–ª–æ–∫–æ",
		})
		return
	}

	word := strings.TrimSpace(parts[0])
	translation := strings.TrimSpace(parts[1])
	context := ""

	// –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
	if len(parts) > 2 {
		context = strings.TrimSpace(strings.Join(parts[2:], " - "))
	}

	err := h.wordService.AddWord(userID, word, translation, context)
	if err != nil {
		log.Printf("Failed to add word: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		})
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   fmt.Sprintf("‚úÖ –°–ª–æ–≤–æ '%s' –¥–æ–±–∞–≤–ª–µ–Ω–æ!", word),
	})
}

// WordsHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /words
func (h *BotHandlers) WordsHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID

	words, err := h.wordService.GetUserWords(userID)
	if err != nil {
		log.Printf("Failed to get user words: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤.",
		})
		return
	}

	if len(words) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add!",
		})
		return
	}

	var response strings.Builder
	response.WriteString("üìö –í–∞—à–∏ —Å–ª–æ–≤–∞:\n\n")

	for i, word := range words {
		response.WriteString(fmt.Sprintf("%d. *%s* - %s", i+1, word.Word, word.Translation))
		if word.Context != "" {
			response.WriteString(fmt.Sprintf(" (%s)", word.Context))
		}
		response.WriteString("\n")
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      response.String(),
		ParseMode: models.ParseModeMarkdown,
	})
}

// QuizHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /quiz
func (h *BotHandlers) QuizHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID

	quiz, err := h.wordService.GenerateQuiz(userID)
	if err != nil {
		log.Printf("Failed to generate quiz: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–ª–æ–≤–∞.",
		})
		return
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: make([][]models.InlineKeyboardButton, len(quiz.Options)),
	}

	for i, option := range quiz.Options {
		keyboard.InlineKeyboard[i] = []models.InlineKeyboardButton{
			{
				Text:         fmt.Sprintf("%d. %s", i+1, option),
				CallbackData: fmt.Sprintf("quiz_%d_%d_%d", quiz.WordID, i, quiz.CorrectIdx),
			},
		}
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        quiz.Question,
		ParseMode:   models.ParseModeMarkdown,
		ReplyMarkup: keyboard,
	})
}

// ReviewHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /review
func (h *BotHandlers) ReviewHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID

	words, err := h.wordService.GetWordsForReview(userID)
	if err != nil {
		log.Printf("Failed to get words for review: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
		})
		return
	}

	if len(words) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "üéâ –û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!",
		})
		return
	}

	var response strings.Builder
	response.WriteString("üîÑ –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n\n")

	for i, word := range words {
		response.WriteString(fmt.Sprintf("%d. *%s* - %s", i+1, word.Word, word.Translation))
		if word.Context != "" {
			response.WriteString(fmt.Sprintf(" (%s)", word.Context))
		}
		response.WriteString("\n")
	}

	response.WriteString("\nüí° –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /quiz –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è!")

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      response.String(),
		ParseMode: models.ParseModeMarkdown,
	})
}

// CallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã (–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç—ã)
func (h *BotHandlers) CallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	data := callback.Data

	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback'–∞
	parts := strings.Split(data, "_")
	if len(parts) != 4 || parts[0] != "quiz" {
		return
	}

	wordID, _ := strconv.Atoi(parts[1])
	selectedIdx, _ := strconv.Atoi(parts[2])
	correctIdx, _ := strconv.Atoi(parts[3])

	correct := selectedIdx == correctIdx

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞
	err := h.wordService.UpdateWordReview(wordID, correct)
	if err != nil {
		log.Printf("Failed to update word review: %v", err)
	}

	var responseText string
	if correct {
		responseText = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
	} else {
		responseText = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å!"
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
		Text:            responseText,
		ShowAlert:       true,
	})

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if msg := callback.Message.Message; msg != nil {
		b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    msg.Chat.ID,
			MessageID: msg.ID,
			Text:      fmt.Sprintf("%s\n\n%s", msg.Text, responseText),
			ParseMode: models.ParseModeMarkdown,
		})
	}
}

// DeleteHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete
func (h *BotHandlers) DeleteHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID
	text := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/delete"))

	if text == "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete [–Ω–æ–º–µ—Ä]\n–ü—Ä–∏–º–µ—Ä: /delete 1\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /words",
		})
		return
	}

	wordNum, err := strconv.Atoi(text)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /words –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.",
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	words, err := h.wordService.GetUserWords(userID)
	if err != nil {
		log.Printf("Failed to get user words: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤.",
		})
		return
	}

	if wordNum < 1 || wordNum > len(words) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –£ –≤–∞—Å %d —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /words –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", len(words)),
		})
		return
	}

	wordToDelete := words[wordNum-1]
	err = h.wordService.DeleteWord(wordToDelete.ID, userID)
	if err != nil {
		log.Printf("Failed to delete word: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.",
		})
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   fmt.Sprintf("‚úÖ –°–ª–æ–≤–æ '%s' —É–¥–∞–ª–µ–Ω–æ!", wordToDelete.Word),
	})
}

// StatsHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats
func (h *BotHandlers) StatsHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID

	words, err := h.wordService.GetUserWords(userID)
	if err != nil {
		log.Printf("Failed to get user words: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
		})
		return
	}

	reviewWords, err := h.wordService.GetWordsForReview(userID)
	if err != nil {
		log.Printf("Failed to get words for review: %v", err)
		reviewWords = []*repository.Word{} // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
	}

	totalWords := len(words)
	wordsForReview := len(reviewWords)

	var response strings.Builder
	response.WriteString("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n")
	response.WriteString(fmt.Sprintf("üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: %d\n", totalWords))
	response.WriteString(fmt.Sprintf("üîÑ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %d\n", wordsForReview))
	response.WriteString(fmt.Sprintf("‚úÖ –ò–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: %d\n", totalWords-wordsForReview))

	if totalWords > 0 {
		progress := float64(totalWords-wordsForReview) / float64(totalWords) * 100
		response.WriteString(fmt.Sprintf("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%%\n", progress))
	}

	response.WriteString("\nüí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!")

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   response.String(),
	})
}

// ImageHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /image
func (h *BotHandlers) ImageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	text := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/image"))

	if text == "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /image [—Å–ª–æ–≤–æ]\n–ü—Ä–∏–º–µ—Ä: /image apple",
		})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
	})

	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ImageService
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   fmt.Sprintf("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ '%s' –±—É–¥–µ—Ç –∑–¥–µ—Å—å!\n\nüí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.", text),
	})
}
