package service

import (
	"context"
	"log"
	"time"

	"github.com/AndrePim/telegram_english_learn_bot/internal/repository"
	"github.com/go-telegram/bot"
)

type SchedulerService struct {
	bot         *bot.Bot
	userRepo    *repository.UserRepository
	wordService *WordService
}

func NewSchedulerService(bot *bot.Bot, userRepo *repository.UserRepository, wordService *WordService) *SchedulerService {
	return &SchedulerService{
		bot:         bot,
		userRepo:    userRepo,
		wordService: wordService,
	}
}

// StartDailyReminders –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
func (s *SchedulerService) StartDailyReminders(ctx context.Context) {
	ticker := time.NewTicker(24 * time.Hour)
	defer ticker.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –º–µ–Ω—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
	s.sendDailyReminders(ctx)

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			s.sendDailyReminders(ctx)
		}
	}
}

func (s *SchedulerService) sendDailyReminders(ctx context.Context) {
	log.Println("Sending daily reminders...")

	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	// –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —á–∞—Å—Ç—å, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
	// –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetAllUsers –≤ UserRepository

	// –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω—É–∂–µ–Ω userID)
	// s.sendReminderToUser(ctx, userID)
}

func (s *SchedulerService) sendReminderToUser(ctx context.Context, userID int64) {
	words, err := s.wordService.GetWordsForReview(userID)
	if err != nil {
		log.Printf("Failed to get words for user %d: %v", userID, err)
		return
	}

	if len(words) > 0 {
		message := "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£ –≤–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."

		_, err := s.bot.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   message,
		})

		if err != nil {
			log.Printf("Failed to send reminder to user %d: %v", userID, err)
		}
	}
}
